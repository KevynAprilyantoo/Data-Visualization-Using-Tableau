<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1010.1014                               -->
<workbook original-version='18.1' source-build='2024.3.0 (20243.24.1010.1014)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <Layers />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Airline_Delay_Cause (Flight Delay)' inline='true' name='federated.1uujz5n1fipnt717mn8gt1i9tg8r' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Flight Delay' name='excel-direct.0v1aic406ckwr01aj36pf1xpu2b4'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/admin/OneDrive/Documents/Materi Binus University/TAUBLE/Project-1/Flight Delay.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0v1aic406ckwr01aj36pf1xpu2b4' name='Airline_Delay_Cause' table='[Airline_Delay_Cause$]' type='table'>
          <columns gridOrigin='A1:O10001:no:A1:O10001:0' header='yes' outcome='2'>
            <column datatype='integer' name='year' ordinal='0' />
            <column datatype='integer' name='month' ordinal='1' />
            <column datatype='date' name='date' ordinal='2' />
            <column datatype='string' name='carrier' ordinal='3' />
            <column datatype='string' name='carrier_name' ordinal='4' />
            <column datatype='string' name='airport' ordinal='5' />
            <column datatype='string' name='city' ordinal='6' />
            <column datatype='string' name='state' ordinal='7' />
            <column datatype='string' name='airport_name' ordinal='8' />
            <column datatype='integer' name='arr_delay' ordinal='9' />
            <column datatype='integer' name='carrier_delay' ordinal='10' />
            <column datatype='integer' name='weather_delay' ordinal='11' />
            <column datatype='integer' name='nas_delay' ordinal='12' />
            <column datatype='integer' name='security_delay' ordinal='13' />
            <column datatype='integer' name='late_aircraft_delay' ordinal='14' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:O10001:no:A1:O10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>20</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>carrier</remote-name>
            <remote-type>130</remote-type>
            <local-name>[carrier]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>carrier</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RID_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>carrier_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[carrier_name]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>carrier_name</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RID_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>airport</remote-name>
            <remote-type>130</remote-type>
            <local-name>[airport]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>airport</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RID_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RID_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>state</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RID_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>airport_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[airport_name]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>airport_name</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RID_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>arr_delay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[arr_delay]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>arr_delay</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>carrier_delay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[carrier_delay]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>carrier_delay</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>weather_delay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[weather_delay]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>weather_delay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>nas_delay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[nas_delay]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>nas_delay</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>security_delay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[security_delay]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>security_delay</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>late_aircraft_delay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[late_aircraft_delay]</local-name>
            <parent-name>[Airline_Delay_Cause]</parent-name>
            <remote-alias>late_aircraft_delay</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Carrier Delay Percentage' datatype='real' name='[Calculation_647392470748553216]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[carrier_delay]/[arr_delay]' />
      </column>
      <column caption='Airline_Delay_Cause' datatype='table' name='[__tableau_internal_object_id__].[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]' role='measure' type='quantitative' />
      <column caption='Airport' datatype='string' name='[airport]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Airport Name' datatype='string' name='[airport_name]' role='dimension' type='nominal' />
      <column caption='Arr Delay' datatype='integer' name='[arr_delay]' role='measure' type='quantitative' />
      <column caption='Carrier' datatype='string' name='[carrier]' role='dimension' type='nominal' />
      <column caption='Carrier Delay' datatype='integer' name='[carrier_delay]' role='measure' type='quantitative' />
      <column caption='Carrier Name' datatype='string' name='[carrier_name]' role='dimension' type='nominal' />
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Late Aircraft Delay' datatype='integer' name='[late_aircraft_delay]' role='measure' type='quantitative' />
      <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
      <column caption='Nas Delay' datatype='integer' name='[nas_delay]' role='measure' type='quantitative' />
      <column caption='Security Delay' datatype='integer' name='[security_delay]' role='measure' type='quantitative' />
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Weather Delay' datatype='integer' name='[weather_delay]' role='measure' type='quantitative' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
      <column-instance column='[carrier]' derivation='None' name='[none:carrier:nk]' pivot='key' type='nominal' />
      <column-instance column='[city]' derivation='None' name='[none:city:nk]' pivot='key' type='nominal' />
      <group caption='Action (Carrier)' hidden='true' name='[Action (Carrier)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[carrier]' />
        </groupfilter>
      </group>
      <group caption='Action (City,State)' hidden='true' name='[Action (City,State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[city]' />
          <groupfilter function='level-members' level='[state]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='state, city'>
          <field>[state]</field>
          <field>[city]</field>
        </drill-path>
      </drill-paths>
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/admin/AppData/Local/Temp/TableauTemp/#TableauTemp_0g6cakd1gcr9f5184n9rl1dxjbpl.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='12/12/2024 07:33:07 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>year</remote-alias>
              <ordinal>0</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>month</remote-name>
              <remote-type>20</remote-type>
              <local-name>[month]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>month</remote-alias>
              <ordinal>1</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>12</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>2</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>67</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>carrier</remote-name>
              <remote-type>129</remote-type>
              <local-name>[carrier]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>carrier</remote-alias>
              <ordinal>3</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>19</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>carrier_name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[carrier_name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>carrier_name</remote-alias>
              <ordinal>4</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>20</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>airport</remote-name>
              <remote-type>129</remote-type>
              <local-name>[airport]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>airport</remote-alias>
              <ordinal>5</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>954</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>city</remote-name>
              <remote-type>129</remote-type>
              <local-name>[city]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>city</remote-alias>
              <ordinal>6</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>910</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>state</remote-name>
              <remote-type>129</remote-type>
              <local-name>[state]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>state</remote-alias>
              <ordinal>7</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>61</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>airport_name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[airport_name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>airport_name</remote-alias>
              <ordinal>8</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>945</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>arr_delay</remote-name>
              <remote-type>20</remote-type>
              <local-name>[arr_delay]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>arr_delay</remote-alias>
              <ordinal>9</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>10290</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>carrier_delay</remote-name>
              <remote-type>20</remote-type>
              <local-name>[carrier_delay]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>carrier_delay</remote-alias>
              <ordinal>10</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6892</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>weather_delay</remote-name>
              <remote-type>20</remote-type>
              <local-name>[weather_delay]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>weather_delay</remote-alias>
              <ordinal>11</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2024</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>nas_delay</remote-name>
              <remote-type>20</remote-type>
              <local-name>[nas_delay]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>nas_delay</remote-alias>
              <ordinal>12</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3273</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>security_delay</remote-name>
              <remote-type>20</remote-type>
              <local-name>[security_delay]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>security_delay</remote-alias>
              <ordinal>13</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>552</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>late_aircraft_delay</remote-name>
              <remote-type>20</remote-type>
              <local-name>[late_aircraft_delay]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>late_aircraft_delay</remote-alias>
              <ordinal>14</ordinal>
              <family>Airline_Delay_Cause</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>5259</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:carrier:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;HA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;9E&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;DL&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;OO&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;MQ&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;EV&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;YX&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;WN&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;F9&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;QX&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;UA&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;YV&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;NK&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;G4&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;AS&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;VX&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;OH&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;B6&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:city:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Belleville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bullhead City&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Devils Lake&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Greensboro/High Point&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Honolulu&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kalispell&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lewisburg&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Medford&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Myrtle Beach&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portsmouth&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Savannah&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Stockton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Augusta&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Boston&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Charlotte Amalie&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dayton&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Elmira/Corning&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Garden City&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hattiesburg/Laurel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lafayette&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lynchburg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rhinelander&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sanford&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;St. Augustine&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Twin Falls&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Worcester&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bangor&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bristol/Johnson City/Kingsport&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Del Rio&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Evansville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Grand Junction&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hibbing&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Joplin&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Laredo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Manhattan/Ft. Riley&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Montgomery&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ogden&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Plattsburgh&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Santa Maria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;St. Petersburg&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vernal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Youngstown/Warren&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Anchorage&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bethel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cape Girardeau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dothan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fort Dodge&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gulfport/Biloxi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Idaho Falls&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Key West&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lihue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;New Haven&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pago Pago&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pueblo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sheridan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;West Palm Beach/Palm Beach&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Allentown/Bethlehem/Easton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burbank&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cody&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dickinson&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Flagstaff&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kansas City&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lewiston&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nantucket&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Prescott&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saginaw/Bay City/Midland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Scottsbluff&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sun Valley/Hailey/Ketchum&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Alamosa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Barrow&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Christiansted&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hilo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Juneau&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Marquette&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Montrose/Delta&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ogdensburg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pocatello&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rock Springs&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Santa Rosa&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;State College&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Victoria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Yuma&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bloomington/Normal&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Charleston/Dunbar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Harrisburg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jackson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kotzebue&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Missoula&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Niagara Falls&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Redding&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Juan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Williston&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abilene&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bozeman&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Charlottesville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Daytona Beach&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Erie&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gillette&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hayden&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jacksonville/Camp Lejeune&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lake Charles&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Moline&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;North Bend/Coos Bay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Santa Ana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;St. Cloud&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tyler&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wrangell&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ashland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bishop&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Champaign/Urbana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cordova&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eagle&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fort Smith&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hancock/Houghton&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Islip&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kodiak&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Longview&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Minot&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Newburgh/Poughkeepsie&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pellston&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Raleigh/Durham&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sitka&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Traverse City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Wichita Falls&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Albany&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Baton Rouge&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brunswick&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fairbanks&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Great Falls&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hilton Head&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kahului&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Latrobe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Martha&apos;s Vineyard&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mosinee&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ponce&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rockford&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sarasota/Bradenton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Staunton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Waco&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Appleton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Billings&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Casper&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dubuque&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gunnison&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Killeen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lincoln&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Midland/Odessa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;New Orleans&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palm Springs&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pullman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;San Angelo&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shreveport&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Texarkana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;West Yellowstone&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Arcata/Eureka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Binghamton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cedar City&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Duluth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fort Leonard Wood&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gustavus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;International Falls&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;King Salmon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New York&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama City&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Punta Gorda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sioux City&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tokeen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;White Plains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Aspen&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bismarck/Mandan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Charleston&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Corpus Christi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Eau Claire&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fort Wayne&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Harlingen/San Benito&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ithaca/Cortland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kona&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mission/McAllen/Edinburg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Newport News/Williamsburg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rapid City&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Bend&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Trenton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Williamsport&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Atlantic City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dallas/Fort Worth&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Elko&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gainesville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hartford&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jackson/Vicksburg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;La Crosse&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Moab&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nome&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Petersburg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Wilmington&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Alpena&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bemidji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cold Bay&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dillingham&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Flint&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Greer&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kearney&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lexington&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Owensboro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Providence&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saipan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Scranton/Wilkes-Barre&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Syracuse&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Watertown&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Beaumont/Port Arthur&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Clarksburg/Fairmont&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fargo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Green Bay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hobbs&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kalamazoo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lawton/Fort Sill&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mason City&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Muskegon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Roswell&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sault Ste. Marie&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Stillwater&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Walla Walla&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Adak Island&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brainerd&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Deadhorse&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Escanaba&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grand Forks&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hays&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jamestown&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lansing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mammoth Lakes&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Monroe&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;North Platte&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pierre&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Riverton/Lander&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;St. George&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Valdosta&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Yakima&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Birmingham&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cedar Rapids/Iowa City&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Durango&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Fort Myers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hagerstown&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iron Mountain/Kingsfd&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pasco/Kennewick/Richland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Quincy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Amarillo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bend/Redmond&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Butte&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;College Station/Bryan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dodge City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Fort Collins/Loveland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hyannis&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ketchikan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Liberal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Meridian&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Bern/Morehead/Beaufort&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Paducah&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Provo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Salina&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Wenatchee&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Aguadilla&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Branson&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cheyenne&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Decatur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Grand Island&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Helena&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Johnstown&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laramie&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Monterey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pittsburgh&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Roanoke&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Santa Fe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;St. Louis&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Valparaiso&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yakutat&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[City].[Name]' value='%null%' />
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[State].[Name]' value='&quot;Alabama&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='year' />
        <field-sort-custom-order field='month' />
        <field-sort-custom-order field='date' />
        <field-sort-custom-order field='carrier' />
        <field-sort-custom-order field='carrier_name' />
        <field-sort-custom-order field='airport' />
        <field-sort-custom-order field='city' />
        <field-sort-custom-order field='state' />
        <field-sort-custom-order field='airport_name' />
        <field-sort-custom-order field='arr_delay' />
        <field-sort-custom-order field='carrier_delay' />
        <field-sort-custom-order field='Calculation_647392470748553216' />
        <field-sort-custom-order field='weather_delay' />
        <field-sort-custom-order field='nas_delay' />
        <field-sort-custom-order field='security_delay' />
        <field-sort-custom-order field='late_aircraft_delay' />
        <field-sort-custom-order field='Geometry (generated)' />
        <field-sort-custom-order field='Latitude (generated)' />
        <field-sort-custom-order field='Longitude (generated)' />
        <field-sort-custom-order field=':Measure Names' />
        <field-sort-custom-order field='Multiple Values' />
      </field-sort-info>
      <object-graph>
        <objects>
          <object caption='Airline_Delay_Cause' id='Airline!Delay!Cause_EBF0371F17EC47F2AC182F10D0027127'>
            <properties context=''>
              <relation connection='excel-direct.0v1aic406ckwr01aj36pf1xpu2b4' name='Airline_Delay_Cause' table='[Airline_Delay_Cause$]' type='table'>
                <columns gridOrigin='A1:O10001:no:A1:O10001:0' header='yes' outcome='2'>
                  <column datatype='integer' name='year' ordinal='0' />
                  <column datatype='integer' name='month' ordinal='1' />
                  <column datatype='date' name='date' ordinal='2' />
                  <column datatype='string' name='carrier' ordinal='3' />
                  <column datatype='string' name='carrier_name' ordinal='4' />
                  <column datatype='string' name='airport' ordinal='5' />
                  <column datatype='string' name='city' ordinal='6' />
                  <column datatype='string' name='state' ordinal='7' />
                  <column datatype='string' name='airport_name' ordinal='8' />
                  <column datatype='integer' name='arr_delay' ordinal='9' />
                  <column datatype='integer' name='carrier_delay' ordinal='10' />
                  <column datatype='integer' name='weather_delay' ordinal='11' />
                  <column datatype='integer' name='nas_delay' ordinal='12' />
                  <column datatype='integer' name='security_delay' ordinal='13' />
                  <column datatype='integer' name='late_aircraft_delay' ordinal='14' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1_13857B39ACDA46D4ACFF28411FBE960B]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2_A990D2C29754474DA1D5E41AE597A198]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Carrier' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Carrier'>
      <table>
        <view>
          <datasources>
            <datasource caption='Airline_Delay_Cause (Flight Delay)' name='federated.1uujz5n1fipnt717mn8gt1i9tg8r' />
          </datasources>
          <datasource-dependencies datasource='federated.1uujz5n1fipnt717mn8gt1i9tg8r'>
            <column caption='Arr Delay' datatype='integer' name='[arr_delay]' role='measure' type='quantitative' />
            <column-instance column='[carrier_name]' derivation='Attribute' name='[attr:carrier_name:nk]' pivot='key' type='nominal' />
            <column caption='Carrier' datatype='string' name='[carrier]' role='dimension' type='nominal' />
            <column caption='Carrier Name' datatype='string' name='[carrier_name]' role='dimension' type='nominal' />
            <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[carrier]' derivation='None' name='[none:carrier:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[arr_delay]' derivation='Sum' name='[sum:arr_delay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (City,State)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action1_13857B39ACDA46D4ACFF28411FBE960B]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[city]' />
              <groupfilter function='level-members' level='[state]' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (City,State)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]' />
              <tooltip column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[attr:carrier_name:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#d37295' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]</rows>
        <cols>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]</cols>
      </table>
      <simple-id uuid='{ACB0650D-563E-4C0F-BD67-9AE8014971C3}' />
    </worksheet>
    <worksheet name='Carrier Delay Percentage'>
      <table>
        <view>
          <datasources>
            <datasource caption='Airline_Delay_Cause (Flight Delay)' name='federated.1uujz5n1fipnt717mn8gt1i9tg8r' />
          </datasources>
          <datasource-dependencies datasource='federated.1uujz5n1fipnt717mn8gt1i9tg8r'>
            <column caption='Carrier Delay Percentage' datatype='real' name='[Calculation_647392470748553216]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[carrier_delay]/[arr_delay]' />
            </column>
            <column caption='Arr Delay' datatype='integer' name='[arr_delay]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_647392470748553216]' derivation='Avg' name='[avg:Calculation_647392470748553216:qk]' pivot='key' type='quantitative' />
            <column caption='Carrier' datatype='string' name='[carrier]' role='dimension' type='nominal' />
            <column caption='Carrier Delay' datatype='integer' name='[carrier_delay]' role='measure' type='quantitative' />
            <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[date]' derivation='Month-Trunc' name='[tmn:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (Carrier)]'>
            <groupfilter function='level-members' level='[carrier]' user:ui-action-filter='[Action2_A990D2C29754474DA1D5E41AE597A198]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (City,State)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action1_13857B39ACDA46D4ACFF28411FBE960B]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[city]' />
              <groupfilter function='level-members' level='[state]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (City,State)]</column>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (Carrier)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[avg:Calculation_647392470748553216:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[avg:Calculation_647392470748553216:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[avg:Calculation_647392470748553216:qk]</rows>
        <cols>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[tmn:date:qk]</cols>
      </table>
      <simple-id uuid='{AA4DB4D6-9B10-49E8-A93E-1B8660376EB6}' />
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Sheet Name&gt; US Airflight Delay</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airline_Delay_Cause (Flight Delay)' name='federated.1uujz5n1fipnt717mn8gt1i9tg8r' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1uujz5n1fipnt717mn8gt1i9tg8r'>
            <column caption='Airport Name' datatype='string' name='[airport_name]' role='dimension' type='nominal' />
            <column caption='Arr Delay' datatype='integer' name='[arr_delay]' role='measure' type='quantitative' />
            <column-instance column='[airport_name]' derivation='Attribute' name='[attr:airport_name:nk]' pivot='key' type='nominal' />
            <column caption='Carrier' datatype='string' name='[carrier]' role='dimension' type='nominal' />
            <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[city]' derivation='None' name='[none:city:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[arr_delay]' derivation='Sum' name='[sum:arr_delay:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (Carrier)]'>
            <groupfilter function='level-members' level='[carrier]' user:ui-action-filter='[Action2_A990D2C29754474DA1D5E41AE597A198]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Longitude (generated)]' included-values='non-null' />
          <slices>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Latitude (generated)]</column>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Longitude (generated)]</column>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (Carrier)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Longitude (generated)]' field-type='quantitative' max='32816636.117220465' min='25778206.119207866' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Latitude (generated)]' field-type='quantitative' max='7616003.3221474737' min='1673722.2101095903' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' value='false' />
            <format attr='break-on-special' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' value='false' />
            <format attr='omit-on-special' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]' value='false' />
            <format attr='break-on-special' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
          </style-rule>
        </style>
        <panes customization-axis='layer'>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]' />
            </encodings>
          </pane>
          <pane generated-title='State' id='0' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]' />
              <color column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' />
              <geometry column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.637182354927063' />
              </style-rule>
            </style>
          </pane>
          <pane generated-title='City (2)' id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' />
              <lod column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' />
              <size column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' />
              <tooltip column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[attr:airport_name:nk]' />
              <lod column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='3.1712706089019775' />
                <format attr='mark-transparency' value='201' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Latitude (generated)]</rows>
        <cols>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{B55368D0-B7CD-4E12-83C2-4D5F47284844}' />
    </worksheet>
    <worksheet name='Total Delay'>
      <table>
        <view>
          <datasources>
            <datasource caption='Airline_Delay_Cause (Flight Delay)' name='federated.1uujz5n1fipnt717mn8gt1i9tg8r' />
          </datasources>
          <datasource-dependencies datasource='federated.1uujz5n1fipnt717mn8gt1i9tg8r'>
            <column caption='Arr Delay' datatype='integer' name='[arr_delay]' role='measure' type='quantitative' />
            <column caption='Carrier' datatype='string' name='[carrier]' role='dimension' type='nominal' />
            <column caption='Carrier Delay' datatype='integer' name='[carrier_delay]' role='measure' type='quantitative' />
            <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column caption='Late Aircraft Delay' datatype='integer' name='[late_aircraft_delay]' role='measure' type='quantitative' />
            <column caption='Nas Delay' datatype='integer' name='[nas_delay]' role='measure' type='quantitative' />
            <column caption='Security Delay' datatype='integer' name='[security_delay]' role='measure' type='quantitative' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[arr_delay]' derivation='Sum' name='[sum:arr_delay:qk]' pivot='key' type='quantitative' />
            <column-instance column='[carrier_delay]' derivation='Sum' name='[sum:carrier_delay:qk]' pivot='key' type='quantitative' />
            <column-instance column='[late_aircraft_delay]' derivation='Sum' name='[sum:late_aircraft_delay:qk]' pivot='key' type='quantitative' />
            <column-instance column='[nas_delay]' derivation='Sum' name='[sum:nas_delay:qk]' pivot='key' type='quantitative' />
            <column-instance column='[security_delay]' derivation='Sum' name='[sum:security_delay:qk]' pivot='key' type='quantitative' />
            <column-instance column='[weather_delay]' derivation='Sum' name='[sum:weather_delay:qk]' pivot='key' type='quantitative' />
            <column caption='Weather Delay' datatype='integer' name='[weather_delay]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:carrier_delay:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:late_aircraft_delay:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:nas_delay:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:security_delay:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:weather_delay:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (Carrier)]'>
            <groupfilter function='level-members' level='[carrier]' user:ui-action-filter='[Action2_A990D2C29754474DA1D5E41AE597A198]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (City,State)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action1_13857B39ACDA46D4ACFF28411FBE960B]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[city]' />
              <groupfilter function='level-members' level='[state]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]</column>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (City,State)]</column>
            <column>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Action (Carrier)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]' value='20' />
            <format attr='font-weight' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]' value='bold' />
            <format attr='font-size' value='15' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-weight' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]' value='bold' />
            <format attr='font-size' field='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]' value='10' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{D37BA354-AD84-4C4A-868A-1730C9D67035}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='84519' id='7' param='horz' type-v2='layout-flow' w='99152' x='424' y='14482'>
            <zone h='84519' id='5' type-v2='layout-basic' w='90677' x='424' y='14482'>
              <zone h='84519' id='3' name='Map' w='45338' x='424' y='14482'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='42260' id='11' name='Carrier' w='45339' x='45762' y='14482'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='42259' id='13' name='Carrier Delay Percentage' w='45339' x='45762' y='56742'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='84519' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='8475' x='91101' y='14482'>
              <zone h='19476' id='8' name='Map' pane-specification-id='3' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' type-v2='size' w='8475' x='91101' y='14482'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='9114' id='9' name='Map' pane-specification-id='0' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' type-v2='color' w='8475' x='91101' y='33958'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='27964' id='10' name='Map' pane-specification-id='3' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' type-v2='color' w='8475' x='91101' y='43072'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='27965' id='12' name='Carrier' pane-specification-id='0' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]' type-v2='color' w='8475' x='91101' y='71036'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone h='13483' id='14' name='Total Delay' w='99152' x='424' y='999'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1250' minheight='1250' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='18' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98002' id='17' param='vert' type-v2='layout-flow' w='99152' x='424' y='999'>
                <zone fixed-size='100' h='13483' id='14' is-fixed='true' name='Total Delay' w='99152' x='424' y='999'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='84519' id='3' is-fixed='true' name='Map' w='45338' x='424' y='14482'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='19476' id='8' name='Map' pane-specification-id='3' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' type-v2='size' w='8475' x='91101' y='14482'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9114' id='9' name='Map' pane-specification-id='0' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' type-v2='color' w='8475' x='91101' y='33958'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27964' id='10' name='Map' pane-specification-id='3' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' type-v2='color' w='8475' x='91101' y='43072'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='42260' id='11' is-fixed='true' name='Carrier' w='45339' x='45762' y='14482'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27965' id='12' name='Carrier' pane-specification-id='0' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]' type-v2='color' w='8475' x='91101' y='71036'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='42259' id='13' is-fixed='true' name='Carrier Delay Percentage' w='45339' x='45762' y='56742'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{A091000E-CE2C-40F4-AFB8-63194705B694}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' show-side-pane='false' source-height='37'>
    <window class='worksheet' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[sum:arr_delay:qk]' type='color' />
            <card pane-specification-id='3' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:airport_name:nk]</field>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]</field>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{F561729A-551E-4F0A-B2B0-C40298421B1C}' />
    </window>
    <window class='worksheet' name='Carrier'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]</field>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier_name:nk]</field>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:state:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{41BF1A4B-D04C-4E44-8940-84191FDADCE0}' />
    </window>
    <window class='worksheet' name='Carrier Delay Percentage'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EB01D1E9-37A1-4BE1-B16A-8BF74483AF32}' />
    </window>
    <window class='worksheet' name='Total Delay'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3BF68239-3A79-46E0-A4C1-9B21EEECBDB6}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Carrier'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:carrier:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Carrier Delay Percentage'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1uujz5n1fipnt717mn8gt1i9tg8r].[none:city:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Total Delay'>
          <zoom type='fit-width' />
        </viewpoint>
      </viewpoints>
      <active id='11' />
      <simple-id uuid='{D9E4DA5F-93E0-4A74-863D-9CF347898700}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Carrier' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Carrier Delay Percentage' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO29eXCb6X3n+XlxX8RFkCDB+75Ekbq7pT4su9tpt92O40knY0+cTDwZ724m
      O5uq3TlqdzLl2traIzWb1CZTnkxsx0fs+Mi4T9tSq9VuXd2i7oPifYLgARAgiIO48eLdPyih
      W25REtVSNyU8nyr9IeLFiwcv3u/7PL/zkRRFURAIShTVxz0AgeDj5IEKoFAoPMjTCwQfmgcq
      ALG6Emx1xBJIUNIIAQhKGiEAQUkjBCAoaYQABCWNEICgpBECEJQ0QgCCkkYIQFDSaDb7hkI+
      zcjIGFZXDXXVLvKZGFcHpyivrkGbjxOKJWlo6cBm0j2I8QoE95VNCyC0NE9lQyfB+UmodpEM
      B4jLEvVmE/OTU2jN5Rj1GhRFQVEUkQ8k2NJsWgAKCmqVCklaXz2VVbXylLvApcuD7Nj1GLlk
      gLFxPz0dVUURCARbFWmz9QD5TIKhkXHKyqsoLzMgFXLM+pYw2V3o5QShSJymjl7sZh2yLKNW
      qx/U2AWCD82mBbAZhAAEWx3hBRKUNEIAgpJGCEBQ0ggBCEoaIQBBSSMEIChphAAEJY0QgKCk
      EQIQlDRCAIKSZtPJcKlYiMGxWQxmG9u720hHFzgzuERjUz35WIBIPEFtRz9um+FBjFcguK9s
      WgDRSJi2bTsIzE0AUCiosZi1JJIJVOjYtaeZ0bEgLosHWZZFNqhgS7NpAeh1eiKrq6TTWQqF
      AgWVno6OdsZGxjBoJcKBZTQWRzEJTiTDCbYym88GVRQW5mawVtahZBOYzCa8M7NU1jZikLL4
      AhGa6muQJElkgwq2PCIdWlDSCC+QoKQRAhCUNEIAgpJGCEBQ0ggBCEoaIQBBSSME8BEhyzJT
      U1MAhEIhwuFw8bVAIEA0GmVsbIxEIkE4HBYR9I8IIYCPAEVROHfuHCdOnCCfz3P06FGGhoYA
      yOVyvPrqq0xPTzM1NcXJkyc5f/48uVzuYx51aSAE8BEQDoe5fPkykUiEn//856jVaubm5gA4
      dOgQZrOZ+fl5EokEwWCQ5eVlTp48+TGPujRQf/3rX//6Zt4gZ5Ncu3aNVF6F3WoBYGVpmoXV
      PKmVRWbnFzGUOTBo1SiKgkolNKbVamlubiYUCvHMM89gt9vJZDJotVo6OzvR6XTodDp27tyJ
      xWIhGAxis9lobGz8uIf+yLPpVIhl3wQqeyPL8xN0d3UjZ5OMjY8ja8pRUktIWgutHR3o1eu5
      QEIAt6ZQKOD1emlqavq4h1LSbDobFCTgPc0semdIZtIE/As8/6l9yOkgIxN+ejqrkSQJSZLu
      32gfIdRqNc3NzRQKCiqVuEYfF5ueAeRcmuHhUawVHuwmLRarHbWSZjGYQk6GCEUTtHb1UmbQ
      iGS4O3B6aJ5vvn6B//THn8ZpNX7cwylJNj0DqLUGevv6f+2vRjxVRsBJ3f0Z1yOPoigMTgWI
      JTOo1WIG+Li4hyVQ6TE6OorH4yGXy5FIJKivryedTnPs2DFkWWbHjh0sLS3R09NDIpGgvLz8
      juf0+qOM+VboaaxgMbSGzSxKSD8OhIV6B+LxOMePH2d5eZnJyUnGxsYAMBgMPPfcc2g0GkZG
      RlhdXeX06dP4/f47nrOgKHzn0GW+9Klt7GyvZmh2+UF/DcEGCAHcgZ/85CfIsszY2Bi9vb03
      2TQrKyvYbDZqa2tZXFzE6/UyNTXF2trabc958uocRr2GnR3VdNa7GJpeFpHfj4mHZgm0vLxM
      RUUFfr+fsrIyLBYLa2trLCwsYDAYsNvtwPqTWa1Wo9Hcn6/2R3/0R8zMzCBJEidOnGBsbIzm
      5mbMZjOjo6M8/vjjaDSaohguXbqEXq/f8HzxZIaXjo/wv33lSVSSRGO1nWA0SSqbx6TX3pcx
      C+6eh6Ik0u/3881vfpOvfvWrDA4Okkql+MIXvkAymWRxcZGBgQFcLhf5fB6Hw8HevXvR6R7c
      LpVLS0tUVlZu+rspisL337iCUa/lxU90I0kSiqLw9e8c5/c+3Utb7Z1th/eTy+X4i7/4C/74
      j/+YQ4cOodfr+fznP08+n+e73/0uPT09ZLPZot1SX1+PzWbb1Gc86mz5JZAsyxw/fpzGxka8
      Xi/9/f04HA5kWcZsNlMoFNi/fz8AwWCQkZERXnvttQe6pKiurt7w5pcLBWb9EeRb7I7pDUS5
      PBnghf3txfiIJElsa6pgbG5lU2NQFIUzZ87Q0tJCMBikt7cXu91OLpcjm81iMpmIx+Nks1lS
      qRTnz5/nzJkzYtfOX2PLCwCgp6eHWCyGzWbj1KlThMNhotEo+Xye6elpmpqaePbZZ2lubqa2
      tvZjjT1cnVrmf/qrw/z1z85ybnSRyFoaAFku8P3DV/hnz/Zi/LWlTk9TJcPe4KY+R1EUwuEw
      o6OjzM/PEw6HicVixe/+2c9+llgsxp49e9DpdLjdbnQ6Hfl8/v580UeEh2IJBOvTvUajIZlM
      otPpGBsbo7u7G1mW0Wq1KIqCLMvrvYoKBQyGj96tqCgKPzhylUQ6R2+zm8uTfsZ9K1iMOtRq
      CY1KxZ/9wVMfiI4nUln+/d++xV/96+c2HTm/sRy7evUqZWVlhEIhuru7uXTpEh6Ph+bmZoLB
      IJIkEQgE6O3tFdH59/HQCOBWROJpykw61OqtMZH5lqP85U8H+L++9in0unUjvKAozAWi/ODI
      VXqbK/nNJzpv+d7/+O23+Zcv7KSuUqzRP0ruqTFWQVFuyvN5/ymU9732IAWwGk/xr/7yl3zp
      U9t44UDHbYarcPbsWebm5mhqamJ8fBy1Ws2LL77I6uoqhw4dKnqR0uk0tbW1tLS0UFZWtqnx
      FBSFv/zpAHs6PTzV1/DB1wsKksSGT9+f/OoaTquJZ3c3b+pzf51sXuYbL5/j4M4m+lrcH+pc
      DwM3Zny1Wl3cmF2lUhXvPwCVSlW8L+Hm32BjX6FSYGJshPKqesrKzGivP2UT0WWGJufRGcz0
      b+sERWFq6CyrihubKkIilcbd3IfH+WBzWyJrafQ6De8OzfMbe1vRaW8tNEmSqK+vZ3h4GKvV
      Sj6fL14MlUpFLpdDq9UiyzKJRIKLFy8SCAR49tlnN5XJOjgVIJ7MsH9bHRcvXqS1tbVop6xn
      fCqcO3eebDZLc3MzPp+Pbdu2kUqlcLlcbG9x88uBST65o4H5+XkcDgd6vR6/31+0azKZDEtL
      S9TV1REIBKiqqiKdTmM0Gos/ajKdY2B4HrVKKgkBjIyMMDk5idPpZGxsDJVKxZe+9CX0ej3f
      +ta36OrqQpZlFhYW6O3txe12U1VVVXz/hvUAicVrHD49iEWjsKZ1UG5eN9zCywtUNvaQWVvB
      5XIRDwfIqvUUZDWSBL3b21icC+FwWIrNcW+o9H79k2WZ7x2+wuceb0MuKAzNLNPbVLHhsalU
      Co/Hw4kTJ+jo6CCZTBa9ShUVFSwvL/P000+zuLiI1WpFq9VSU1MDcFfjyeXz/PVL5/inn+xG
      yid56623qKqqIhAIEAgEqK+vJ5/PYzAY8Hq9zM3NoSgKMzMzZLNZ3G43NrOen/5qmH3tLvz+
      Jd59911mZmaKadM1NTWMjo6ysrLCwMAAy8vL+P1+IpEIVVVVxbEMDM0DMLMUoa3WgdWku+/X
      fyv90+v1XLhwgZaWFubn51EUhd7eXgqFAktLS6yurqLValldXWVxcRGfz0dbWxuSJFEoFDb2
      Apkqm7Gqclwa8+FxvBfYMRpMLPsXSWfy5HJZMrk80ZVlvPOLFPJpFud86Gx21Gp1MSB1v/8F
      o2kWV9Y40NvA7z/Xx5hvhStTyxseHw6HmZ2d5Stf+QoqlYre3l6uXLlCc3MzyWSSffv2YbPZ
      ePzxx9mzZw81NTXo9fq7Hs/xKz6qy8voaXLz+uuvI8sy09PTdHV1odVq0Wg06HQ6xsfHqa2t
      paenh6WlJYLBIKurq2QyGfQ6LU6rkXRhfbxarRaLxcLMzAxOpxONRlN0ee7cuZNYLMb09DTD
      w8MMDg6i0WiQVCqOXpjhnzzdzR98pp/vvTGIpFIVx3nDc6QoCqurq4RCIRRFQaPRkEgkWFlZ
      d8Wura2hVqspFAoP5Pe7n/+i0SgHDx5kYmICu91OVVUVa2tr5HI5Ojs7MRgM7N+/n7a2Nurr
      67Hb7cXvrNFoNp4BcnE/54bnIbvGtG+Z9o421BIYTFbIJqmubSCfy2B1lFNVVU1dTRWVFU6S
      eQ21bkcxyHO/C2IUReFHRwfZ01VDa40TjVpFR305/+XV8+ztrMFkuNnFKEkSFRUVNDc3o1ar
      qa2txeVyUVdXh06no76+HqfTiUqlwmw2YzabqaiouGtPSTyZ5W9eO8+f/NYezMb1qq7y8nI8
      Hg9nzpxhcnISh8NBPB7nzJkzaDQa+vv7yeVyNDU1MTc3V0yxWFyJM7fgx2VREw6HyefzeDwe
      EokEFouF1157DY/HQ11dHRUVFZSXl5NMJikrK6OmpoZx3wrjvhU+/0QH1U4LV6cDJFJZWmqc
      wLrHyOv1cuXKFbRaLadOnaKqqgqLxcKrr76KRqMpBhZVKhXJZBKn03lff7/7TT6fJxgMcuDA
      Aex2OxUVFcRiMSwWC9lsloaGBioqKrDZbLS0tGA0GqmsrCy+f0MjOLk0xNuTBaryPiKylp79
      z1Jl2tzgHoQRvBJL8vW/O86f/w/P3ORPP3ZpluNXvPzZ7z91VwUma6ksP/nVEJ/b347bYb7n
      8fzwzauoVSp+95M9G4omGAxSXl5+x4fB5Qk/Ry9M8YfPdmIymdBoNMTjcYxGI16vF4/HQzab
      xWKxoFKp0Gq1xONxLBYLkiTxn378Lk/1NbCvuxaAcCzFf/z223z9q5/AZTORyWR45ZVXqKmp
      4cCBAxw+fJjnnnsOgGPHjjE3N0dLSwsjIyPodDpkWeYLX/jClhfBrbiT0+EGGy+BqjrBf4lL
      cxE6e3dTucmb/0Hx6skxPr2n+QPBpKf6G6iwm/juocskUtk7nmdifoXX3xnjzPU1871wdmSB
      gaF5XjjQftsLXVFRcVczYVO1nflgHJvdgdFoRKvV4nQ6MRqNtLW1o9IacLlcGAwGdDodkiRh
      tVpRqVT4w2sEVhPs7vQUz+e0GvnNJzr44ZGrFBSFpaUlOjs7CQaDXLt2je7ubgqFArFYDLPZ
      jMVioaOjg76+Pjo6OrBarffUnSKZTDIyMkI6nSadTjMxMVH0yCjXx5HL5fD5fBQKBRKJxKY/
      43bk8jL/+/eOc/jM5B2P3fBXifuuEMrqqKuuRNGbtkTIOBJPc2F8iWdu4SpUSRJffKqLV98Z
      45cDE7c9T14u8JM3L9FVtsr3//E1ro3P8tprr7G0tATA8PBwsVXJq6++ysrKCqOjoze5e2f9
      Ef7qZ2dwOy2YDfcn76jMrEerUROKJj/w2k/fHuJf/9Uh0tlbR3IPn5ni4I5G1L8mtE/saGQ5
      kuTKpB+3243dbuf555+ntbWV+vp6FhcXSafTtLW18dRTT1FRUcG2bdvYu3cvTz311E3Lhbvl
      RkT6yJEjvPnmmze5JKenp/nBD37ApUuXOHv2LFeuXLmpR9L9QFFgPhjjwvjSHY/d0AbQ6vQY
      TFbmvD46u7owajcvgftpAyiKwiunxmitcbJ9A/ee2aClrtLGoTOT7O2u2TC78si5KXIFid97
      bheJSIC//emb7N3WRF1dLWazGbvdTllZGWfPnqWjo4Njx44RCoWoq6tDq9Xx5vlpvnfoCn/y
      W3v5/BMdaO5TIE6SJHzLMXL5As0eBwDpbJ4fvjnIxYklGtw2Tl7x0t9WhUH3ngc7upbmH94a
      5F9+bhdazc1LTrVKRUuNg7959QLP7GnFVb5uUGu1WiRJwmazYbFYMBqNmM3rS8Ebr5nN5nuK
      Gms0Gt5++20qKioYHR0lEolgtVoxm8288cYb6PV6qqqq8Hq9LC8vMz4+TmNjIybTzcuMYDBI
      IpHAYDDg8/nI5/OYTCYKhQILCwvo9Xri8TiSJBUzBSRJwr+6xvBMkGy+QLXTQuVtlrgbCiAy
      P0rW0Ua7QyGhdWA3bj69+H4KIJnJ8fdHrvLV5/tv+vHfjyRJ1Ltt6HUaXjo+yv5ttR94Ioai
      Sb71i4v8yRf3kohHSMUjpNMZcLaRDk7T1tbGxMQES0tLPPPMM1y9ehVFUWhqamJ4bJLDV1fw
      BWP8uy8foLHaztjoCKFQCKfTyfnz5zGbzcU0jHA4TDKZxO/3o1ariz/m7W6qXF7m0qSffd21
      LARj/L8/OY2jzMCfvvgYT/c1sJbK8f3DV+hpqsBqWvfOHT0/TbnVxK4Ozy3PabcYmF4M89+O
      jXCgt37DmMn9YmZmBlmWicViGI1GjEZjsUrOZrMxNTXFwYMHKRQK1NTUsLKyQnt7+00CUBSF
      8fFxLl68iKIoTE9P43K5sFqtnD59mlgsxuXLl5mdnWVxcRG/309jYyOSJPGrCzPUVlr59J4W
      vnv4Ck/1NWyYLbChAM6fepNLo17iWYnezmY099C54H4K4NDABM4yI3u7a1EUhZMnT3Lq1CmS
      ySQnTpxgdHSU7u5uVldXmRq6wMDZ87z97iWUVJhQKHR9Ha7mG6+c5+n+Rjw2NZcuXcJisfCZ
      Tz3J9378Ko0tbaSjQRYXF0mlUphMJux2Oy1tnXz7H9/g3ekMT+xo559/ph+TYT3/KJPJMDQ0
      hM/no7KykjNnzhTX1i+99BK5XI6lpSV8Ph9+v5+6urrb1iqUGXX87PgIGo2ab//iEr/7qR6e
      f6wNrUaNJEm01Topt5n5zy+fo67SRrnVyDdeOcdXfqOPMtPGdQhqlYqB4XlyeZmeprv3ct0L
      NpsNt9tNd3c3XV1dNDY2FjNU6+rq2LFjB0ajEY/HQ01NDR0dHZSVld00JkmSiEQijIyMsGPH
      DhYWFlhYWKCzs5NYLFYMbKbTaUKhECsrKwSDQVpaWvj+4av85pOdNFbZGZtbIZJI01rjvOV3
      3lAA1VUuRsamyKUTeJo6Mes3/9S4XwKYXAjz90eu8kef24nZqCu6WEdHR+nq6sLr9aLT6eju
      7i5OlzUVVq5MBUitxcgmo0SjUaKykWszy/zhZ/oxm010dHTQ3NyM3W7nqcd38Z0jIzzzWA97
      dvatP5HMFmZDGX741jAjywr/5iuf5FO7mopeJkmSmJ+fZ2xsjPb29mJCWltbG2+99Ra5XI5o
      NIokScXZYHl5mdbW1g2/azYn88M3B4klMvyH33+Sll/74SRJwuMqo6exgm+8co6phVXKTHp+
      Y2/Lba+hx1XGs7ubeePcFHOBKN1NFagekAhUKhU6nQ6VSlX0VtlstuLMeOOeuJGycGPJ9X5k
      WWZychJZlouNw+LxOG63uxgbiUQifPazny0a6mq1mrLyak5c8fLFp7tQqVS01jj529cv8OT2
      hmJ+1vu5bRxgcc1AV2s9FRUV6DQfnw3wj8eGmV2K8OInulGrVRQKBZLJJFarlQsXLrB3797i
      jbW2tobH42FsdISv/t7v8K1X36W3rQ61SuLVC0H++8/vxnGLFiRmg47qcivfPXyVxio7b12c
      4TuHLhOKJvnc/nY+f6CDrkbXTTeNLMucO3eOVCpVzEXJ5/OUlZUVq8ZyuRxPPvkkKpWquARq
      adn4Zl1/0sNvPtlBlXPjfCS7xUBvcyXf/PlFdrRX31Xag0atYm9XDUcvTDMyG6S/reqBieDX
      KRQU/u8fvoMvEGVbc+UdZyBJkorXsbGxEaPRyPbt25mcnGTv3r2YTCa2b9+OVqvF4/HQ2NhI
      c3MzJ676KLcZ6WtdT3cw6rVk8zJnhhfY2V79gc/dMA6QS0V55eXXcXka2bHvsXuyAe5XHCCd
      zbOWyuKyra8Rbzz919bW2LlzJxcvXsTj8TA1NcXu3buLofGKigqOXZjgJ0evUOUwsr27jd85
      uF4ldcOvHgwGi0lwFouF//W/HGJ0eoGvvHCAZpea7V1txUDU3aAoCpOTk7S1tX3o7303zPoj
      VNhMmI1374nK5WX+88vn0KpV/Hef/6Dh/CCYWVrl//j+SXQaNV98uotndjXdVgTxZAajXrsp
      B0OhoPAfvvUrvvbCLhqr7cW/5/Iy/+5vjvKvfmtPMSh4gw1ngPTyOFfnwrTUVJI1OIu5QJth
      oxlgamqKkZERamtrmZmZYWFhgcrKSkKhECdOnCAQCKDRaIhEIqjVaiQUbJb3DKQb0d2amhpU
      KhU1NTVYrVYaGhrQarU0NDRQVla23n2txsXEUpyL02H+7ZcPoNOqiUQixONxTp8+TX19PUND
      Q1gsFhwOB/NjF+iuteDUZQgt+4nFYmQyGVwu1119Z0mS7qotiqIoDAwMcPr0afR6PcePHycS
      iVBXV8fi4iKHDx9mbm6O2dlZJicnicfjWK3WD5R62i2GTRu1apWK3R0eLo0vcW50kd0d1Q+0
      O91qPMWf/+hd/uSLe/nCkx28dGKEEW+I7S3uDxiniqIwOR/mz/7ubUa8QfJyAY1ahc1suJ7t
      uXFwKxxLcby4/HnvGLVKhctm5r8dH+HJ7fU3zXobu0GNZiauXWU2mOSx3dvQXR+oUsgzPTFG
      QW3EZNCRS68xNjaOrNKRjoWYmvHetjmuoijFsr3R0VG8Xi8tLS1YrVaMRiMNDQ0MDw8TDofx
      +/0sLi7idrvvucBFkiSqnBZqK6xF40+n0zEwMIDJZKK/v5+ZmRl2796NJEmElv3s37cbr9db
      NKzm5uZwOp3Fwvv7wY2U8fHxcTQaDX6/H0mSaG1tZXZ2FrvdztTUFBaLhWg0ytzcHGtrazQ1
      3fzkVBSFI0eOcOzYMex2O2+++SYAlZWVzM7O8tZbb6FWq3njjTcIhULMzs7S2NiIWq1iZ0c1
      I3Mh3r40y55Ozwc8Zu8nmVxP8isUCkQiEc6ePYvb7Uav1zM6OsqZM2ew2+2cO3eO6upq/H4/
      VquVTC7Pn//Duzz/WBu7O6ox6rU8ub2BUd8KP/nVNXoaKykz6cnLBUbnQvzdLy9x/LKXPZ01
      tNQ48S3HeOviDD87Psyxy15ePjnCU/0N6LUfXJEMDM9j1GvZ0Vb9gdeqnBbOjiwwvxyjq6Gi
      KJANBZD0jyLV7affDVG1A4fpejbo0ixYqllemMXtdqMUFOxOB1OTM8QiIeyuairLbRvmAkmS
      RDQa5Z133ilGGmdnZ2lra0Oj0TA6OkpNTQ2JRAKfz0cikcDv99Pefvto6+1wlBlprysvvn9+
      fp50Ok04HC7WAjgcDlZXV5mcnGRmZoYDBw5gNpupqqoiEong8Xjua0rAjQo2h8OB1+ultnbd
      u1VXV4fL5SIcDrO8vMzBgwdZWFgoplI0NDTcdE0lSSKTyeD1ekmn00V3a2trK8eOHUOn05FM
      JslkMgSDQSKRCIlEYv080nrK9NRCmGOXZ9ndsbEIZFmmtraWU6dO0dfXh9FoZGpqivr6eo4c
      OUJzczOZTAadTsf58+cJhUI0NDTy7V9cxuMq+0Ad9PbmSpxWI3/90lliiQz/cHSQ2UCUT+9p
      4Suf3s7O9mraasvZ2V7NJ3c28czuZirtZka9ITRq1S0bCPzo6DWe3d1cXCq/H0mSiK6l+fsj
      g4x4Q+TlAnaL4XYzgIWBtw/jDaXZsb0T7XXFxFeD6G1uUmsRKlwuJEliemIMRWOgp7sLVX6V
      WX8Op814y3RoWZaLG0BUVlYyPz+/br2XlaHX67l27Rp9fX14PB6SySQGg4FUKkV7e3vxXGfP
      nuX06dOUlZVx+PDhYspxKpXilVdeKdbIjo2NUSgUUBQFne69tOAb7s2enh5sNhvl5eWsrKyQ
      Tqfp6+ujsbERm82G0+mkurqaxsZGXC7XfU/tnpycJBAIcPDgQeLxOA6Hg7GxMVwuFxMTEzzx
      xBNYLBacTidOpxOdTkd5efnNqdi5HGtra8W6AIfDQTQapb6+nlgshsvlIhQKcfDgwWJL9hs1
      CjeuTU9jBVOLq/zi9AS72qtQSR9MA1epVJw6dQpZlvF4PAwMDOB2u6moqKCpqYlYLIbf78fr
      9ZJIJHC5XHz3tVNgsPEvnu8Hbr52iqJQ5TSzu6Oa6cUIn328jef3tVDtNH/g2EKhgEqCKqeZ
      x7pr+fsjgzgteiodpuLrsUSan5+e4Lef7rrl+wuFAg1uK0/3N9BeW86YL8w/Hhve2AjOrPo4
      O53kyV03V1tlEhGujU5hspXjcdlAzuFd8KOoDTgMCivRGJ7GHtxO06aM4BvF7XfzlI9Go5w9
      exaXy8XFixeLoftwOMzJkyeRZRmbzYYsy6ysrNDc3My+ffseyVpYRVEYGhpCo9HQ0dHB8PAw
      1dXVjIyMsH//fgYHB2lsbCw+AMLhMCaT6QOzWaGg8IM3rzK/HONPf+exD0TRl5aWOH/+PLC+
      vPL7/dTX12MymQiFQiwuLrJv3z7W1tYwGM1860evEJVc/D9/+iKWTRjoAOl0mrfeeotMJkNb
      WxuTk5P09/fT1NSEoih845vfYcAn8WSThk88sY9YLEZC42JmKcI//0w/iqIwNTWFwWCgvLyc
      8fHxYiFMIpFgenqa1tbW9VrpjQSQjizxg5++jqmsjGc+99tUlm3eCH4Q2aCKopBKpRgfHyeV
      SrF3715+8Ytf8NxzzzE/P8/S0hKBQID+/n4GBgYwm804HA4ee+yxB9or6FGgUFjvWzQXiPJv
      v3xgw4j7DVKpFOl0GofDsW7byQXOjy5y9MI0F8eX+DdfOsCBbffWLvnMmTP4fD7q6upYWFhg
      +/bttLS0MDExwdDQELLOxstvX+aJtjJMBh2XAjr+8IsH6WutKnYLOX/+PO3t7ahUKlpaWrDZ
      bPj9fpLJJFeuXFmPU2w0ALVaQpIU+nr7KShbq5fM5cuXmZubw+PxcPjwYcrKyhgZGcFmsxEK
      hXA4HDQ0NLBr1y46O9eL0LVa0XXtTqhUEn/wXB/djRX8+/96lJdPjrIYim/YY8loNLKagvOj
      i3zz9Yv8L984wpmRBb74VBf/3//4HPu6au5pHLlcjr6+vuJS7fnnny/uqTY9PbW9wI0AAA5y
      SURBVI3f78ckpfnM412cnopjK3ezsOCju7ECWM9FWltbI5FI4PF4CAQCvPPOOwA4HI7i8i2Z
      TN5mBliZ5u9+9DpqnZXP/e6XqbFtHGbfiI9yf4BUKnXHPBvB3bO0EufsyAJnRxYoKPBEbx0m
      vZZKh5mFUByvP8p8KMaoN4TVpOeffqqHfV21WEzrs2w2m2VgYICOjg7cbjfT09PXkwnXyxOH
      h4fZu3dv0eYLh8NFV3MqleLkyZNYrVZqa2u5evUq/f39TE1N8eSTT7KysoJGoyGdTvOzU1Mc
      euskTz+2g//5K88iSRLpdJrjx48zPz/P3r17WVhYQFEUduzYQSQSYW5ujkwmw2OPPXZrASiF
      PCfePEREMfOpp/ZjNurv6cYSG2Q8/Nxo63L4zCRvnJ2ir9VNZ72LhiobdZU2dJp1d7fbeXOg
      MBaLkcvl+NWvfsUnP/lJvv3tb/O1r30Nu93O+Pg4AGfPnqW5uZlEIoHVamXPnj0bZg68v+PD
      +8nk8vzB//kKT/TW8ydf3Fs8NpfLIUkSGo2GbDaLWq1mcnKS9vb2YiME2CASnFrxcnUpT1nK
      R8W2T1Bxjw0ehAAeHeRCAV8gRl2l9a76MBUKBY4cOUI+ny8WwDz99NP09PTg9/u5cOEC/f39
      vP322+RyOaxWK21tbWzfvn1T41IUhXHfCi6bifJbuD/vxC2/iVpfxuTF4wxcneT1H3+XQOzO
      FVaCR4dMJkMikUBRFBKJxPoTVKWiocpGJpMmm82SzWbJ5XLFbny/zo2bPplM8uKLL9LS0oLD
      4cDn8/Hyyy8XC9O3b9/O/v37SSQSt+2qDev1v2traxQKBVKpFKlUCoCOehcWg5pUKoUsy6TT
      6WKc5U481J3hBPefG5t6+3w+2tvbCYVCLCws8OUvf5lYLMb58+cJBoPF4hmn08nu3bvvKlK/
      trbG2traTX15NsPExASzs7NotVrUajWzs7O88MILWCwWTp48yeLiIk6nk3A4TG9vLy6XC4/n
      1jUSN9hwLkuFF3jltZ9z8do4BbF5Q8kgSRJut7vYgOtGA7Eb1WMul4vGxkYKhQLLy8uMjo5y
      9OjRu+rGbbFY7vnmh/Wu3D6fj/LycioqKooNA27EQGw2G2azmWQyyYULFzh69CjZ7O1XLxsK
      QGdxUmkzMnjuHX76058R33xttOAh5EaR+s6dO7l69SpVVVWo1Wqi0Sizs7PMzs7S0NDACy+8
      QFtbG7W1tR+Z5215eZn9+/fj9XrJ5XI0Njbi9/uJRqMcOXKE3t5eDhw4QE9PD01NTZSVld2x
      qH/jSHB8mVd+eQybzcqufQew28rYbFmwWAI9fCiKgt/vJ5VKUVdXVyw+mZmZobOzE5/Ph9Fo
      pL6+nkwmQz6fJ5fL3VUG7IclGo2ytLREc3NzcS+2G60lg8H19vKtra2kUin0ej3Ly8vU1tbe
      9pwbCiA+e55fXlqiqtxBy/Y91Nq3dhxAILgXNox1m6vb2KOUM3RtBJvhvZs4m4xybWQSk91F
      Z0sD6XiY8Zl5VDozdl2eQDhOc3dfMXtUINjK3FIAuWSEl156hdT1FjTJbIGy60b+aihAY1cf
      gbn1pkN6sw292kdOkljLwM6dHYxNBLC2VhezQQWCrcrGJZHxZS6OzFLj8WByuHFerwiLBn0s
      RnJkM2naWxqRM2nC8Ti+xRAusxatUYfG6Kbe4xBLIMGWZ8MlUCGb4PzAO1zQ2fjCl/5Z8e82
      Vy2SLoLBZEWRc+gsZZjzBXb2e9CpFWKJNHbr5jaXEAg+LjYQgIJ3MURlVTWuug6qrO9LI5Yk
      rLb1rmVcr0Utf1+9rMMmUo4FDw+3dGzm4svMrir8k9/+HSpYZT6a+ajHJRB8JNxyBsjn88wM
      X+D708PkEqs83fz4Rz0ugeAjQeQCCUqaDWO7mVUfF8cWPsqxCAQfORsKQJE0nDz0U/7hxz9m
      WSQCCR5RNnSD6owm3BUudu3ax0fQOU8g+FjYcAZIh+fJFCSuXb1ENHXrXUkEgoed2xjBCt7J
      UdKSifbmelETLHgk2TAX6MzAaUamF9Fq1NgrvozbKgJcgkePWwpAa7Kzu7+bhbiGTzzeh8P0
      3mHZVIyhkUnM9gram+tIr60yPu1DrbdgJMVatkBDSwc2kxCMYOuzoRGcz2bIZ5NcGxxk1+NP
      FzfIWA0GaOjYTsC3vhOj3mynrWm9pXVWzlLIgySpkGVZZIMKtjwbCkBrMLMaXKa+upz3L//V
      atX1SqD1ivtMfIXJxSg9nS1k0mk0xBmdCdDbXXP9eGEDCLYuGxrBcjbF5PQMmWyelo6e4h5h
      BTnH5Pg4tso6DGqZQiaJNxCmzOakTCsTWF2jrb0Tg1YljGDBlmfDGSCzOsuhw0coszpx1HcU
      BaBSa2nv6nnfkQ4c7vd6QFbevguFQLCl2DAOoNWZefzAk2jVEhrRblPwiHLLGUBOR/HGdezb
      s5Nmtx3VPewSLxA8DNzyzi7kM4yNjhKJRJmcGCWV3Vrt0QWC+8UtBaC1VLCjrZozZ85gqe2h
      RlR5CR5R7lgPoBQKcH1Hw80ivECCrc4dF/ezIxcIxEQ6tODRZEM3aDo4wfdeP4smF0Mye/nS
      l34bo3iYCx4xNt4FTZKwOSuwyioMDidrWTDe40YZAsFWZUMbIJ9JEgxH0epNWC1GtDodm7UC
      hA0g2OpsXBIp5xi8cpE3fvEKq2neu/kVhejqCpmcfP2/BVZXgiTTWeRchpVwRCTACR4abpMN
      miSeyFDX3InV+N5hsZVF5lcy5Hx++rf3kFmLEk/lmPGNYVQXMBjUrOXUNLhFdzjB1ueWAlAU
      hZyioaq8jJmZcbq278R4PRqcTKxRU9+Gf259pz+9xUbB78flriIZCdPUWsfYaAjZZRLp0IIt
      zy0FkI0H+cY3/pb+Xbvo3PE4Fe/bJd5SZmN8fAiVSsNaPEZyZYH5aI5GC0hyiqGrI9hqOotr
      f2EDCLYyt94nWFFIpxKMDl5mfHaBTz7/xfdEoChkMhk0Oh1KoYCEQiabQ6XWoNOqyWbz6PU6
      JEkSRrBgyyM6wwlKGpHmKShphAAEJY0QgKCkEQIQlDRCAIKSRghAUNIIAQhKGiEAQUkjBCAo
      aTYtgEI+w/DgVeYDKwAohTzDQ4OkcwWW5qa5OjhINJm97wMVCB4EG1eEbUDI78NV305wYYpa
      dzlyNouEQlZW8Af86MsqMOk1KIqCoigUCqKlimDrsmkBKIqCRq1GJa1PHhqDCZNh/TT9ux8n
      m/AzOuGnp72qKAKBYKuyaQGUV3oYGrmGxVlFNLKKWiqw6F8hJs9h0+RYicRpbO9FpVKhKIpI
      hhNsaUQ2qKCkEV4gQUkjBCAoaYQABCWNEICgpBECEJQ0QgCCkkYIQFDSCAEIShohAEFJIwQg
      KGk2LYBUbIVz584zODIBQC4V49ixt4mnZaZHB7lwdoDlWOa+D1QgeBBsOhkuGlmhddsOAnPr
      AtAarTTVuVFQyCo6du1pZnRsmXKzRzTHFWx5Ni0AvU5HLBolk84Wb25FARTI59JEgkE0Fpto
      jit4KNh8Nqii4Judwl7VQCGzhloqMDO3iM5kpcnjZM6/SktjnWiOK3goEOnQgpJGeIEEJY0Q
      gKCkEQIQlDRCAIKSRghAUNIIAQhKGiEAQUkjBCAoaYQABCXNpnOB5FyK4eExylweGmsqkTMJ
      rg2P4axuREqtEF5L09DSgc2kexDjFQjuK5sWwIp/nurmbpbnJ6GmEr93jqZtO5ifGCWfjqHS
      W9FrNRQKBdEcV7Dlua9LoN4de+loLmdicul+nlYgeGBsOhnu/Usgh1mL0aBjZGQMZ3UDJFcI
      Rddo6dyO1agRyXCCLY/IBhWUNMILJChphAAEJY0QgKCkEQIQlDRCAIKSRghAUNJsXgCKQtC/
      SDKTv/5fhcDSAulsnnwmxaJ/WfQCEjw0bDoOEF32EUiqSMbC9G/vJTw/RVgxkYhE0JLFYTOQ
      0lbTXG0VcQDBlmfzrRHTKSrc1Rj0WgDi8Tw1tdUYNKDSGKiuqyUXjdz3gQoED4JNzwCJyDJD
      E3PojBaaat1IuQQj3mWMZhvGQpxYMo2ntY9qh1HMAIItzz11hrubN4jOcIKHgU2nQyNJSHdx
      mCzLxVRoRVGQpJvfdUN3t/r7hz324/ysB3XsVr4GH2ZcD+rYu33/A02Gu0GhUEClutnc2OjC
      3epYWZZRqVR3deyH/awHdeyt/raZY288TO722EfxGtyoL/n1VcWH+ayPRAAflo0ucikhrsGD
      uQYPhQAEggfF5m2AB4ycSTIyPoks6ah1mfAuhahpbCe3Os8aFmocembn/SQyBfbt7rsre+Rh
      oyDnGR8dZi0j0d7kZnJ2HldVA0YlwWIkQ3eTm8HRKTR6M73d7Y/kNQCYHB0kmpBpb6tnfGIG
      u8tDuRkmF8Ls6G5haGiEgsZE37aOe74GWy4VQqUz0tXRipLPE1hNsqNvG6uBZSrc1cj5DGWO
      Ctoaq3FVuB/ZH15SqWnv6ESjyPgDYXr6dpCMBLG5qlArGeRsBlmBbCZzVx65h5Xmti6MWlic
      W6K9fye5ZBSztRyDRiGbjGCw16BLr5H6EJ+x5QRQyCUZHJmmZ3sPUiFPLpelIEloteuBNxSF
      ufkAdbXuj3egD5JCnqGhETp6t6GTCuRyefKygk633mkjlVijvKoeAznyj2zPAYWx4WvUtHZh
      N6pJp3Pk5QLa69fAYK3EIEcIxJIfahmz5QSQTadRFJmpyVka6msYm/BS3+BhenKKZGyVeCqH
      w+VGr35Un/8gy1nkvMzUxBRVDfV4J0apaWjEOzVGKpkir7eRXV3C6HSj3XK/4P0iTy4rMzc1
      hbW2gdDMGBWeWpbmpkklU/hDq2RyWVq7uvgwDXiEESwoaR7Z54dAcDcIAQhKGiEAQUkjBCAo
      aYQABCWNEICgpBECEJQ0QgCCkkYIQFDS/P/nyyUszb10iQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      tfIsPNERAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='59' name='Total Delay' width='192'>
      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
      jP4fwNQTvyZn6v0AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
